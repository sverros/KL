import numpy as np
import matplotlib
matplotlib.use('TkAgg')
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import matplotlib.tri as mtri
#from mayavi import mlab


g = open('X.txt', 'r')
X_dim = int(g.readline())
Y_dim = int(g.readline())

X = np.zeros([X_dim, Y_dim], dtype = 'float64')
for i in range(0, X_dim):
    for j in range(0, Y_dim):
        X[i,j] = float(g.readline())
g.close()
print np.mean(X), np.std(X)

#fig = plt.figure(figsize = (10,10))
#map = plt.imshow(np.transpose(X))
#ch=plt.colorbar(map, shrink=0.7)
#plt.savefig('figures/X.png')

#phi, theta = np.mgrid[0:np.pi:complex(0.0, X_dim), 0:2 * np.pi:complex(0.0, Y_dim)]
(n, m) = (X_dim, Y_dim)

# Meshing a unit sphere according to n, m                                                                                                             
theta = np.linspace(0, 2 * np.pi, num=n, endpoint=False)
phi = np.linspace(np.pi * (-0.5 + 1./(m+1)), np.pi*0.5, num=m, endpoint=False)
theta, phi = np.meshgrid(theta, phi)
theta, phi = theta.ravel(), phi.ravel()
theta = np.append(theta, [0.]) # Adding the north pole...                                                                                             
phi = np.append(phi, [np.pi*0.5])
mesh_x, mesh_y = ((np.pi*0.5 - phi)*np.cos(theta), (np.pi*0.5 - phi)*np.sin(theta))
triangles = mtri.Triangulation(mesh_x, mesh_y).triangles
x, y, z = np.cos(phi)*np.cos(theta), np.cos(phi)*np.sin(theta), np.sin(phi)

# Defining a custom color scalar field                                                                                                      
vals = np.zeros(X_dim*Y_dim+1)
vals[:X_dim*Y_dim] = np.reshape(X, [X_dim*Y_dim])#np.sin(6*phi) * np.sin(3*theta)
#vals[-1] = vals[-2]
#print np.shape(vals)
#print np.shape(X)
colors = np.mean(vals[triangles], axis=1)

# Plotting                                                                                                                                            
fig = plt.figure()
ax = fig.gca(projection='3d')
cmap = plt.get_cmap('jet')
triang = mtri.Triangulation(x, y, triangles)
collec = ax.plot_trisurf(triang, z, cmap=cmap, shade=False, linewidth=0.)
collec.set_array(colors)
collec.autoscale()
plt.show()


#r = 1
#x = r * np.sin(phi) * np.cos(theta)
#y = r * np.sin(phi) * np.sin(theta)
#z = r * np.cos(phi)
#
#plotting_data = np.zeros([X_dim, Y_dim, X_dim])

#mlab.figure(1, bgcolor=(1, 1, 1), fgcolor=(0, 0, 0))
#src = mlab.pipeline.scalar_field(X)
#src.image_data.point_data.update()
#src2 = mlab.pipeline.set_active_attribute(src, 
##contour = mlab.pipeline.contour(src)
#mlab.pipeline.surface(src2, colormap = 'hsv')
#point_data = mesh.mlab_source.dataset.point_data
#point_data.scalars = X
#point_data.scalars.name = 'Point data'
#point_data.update()
#
#mesh2 = mlab.pipeline.set_active_attribute(mesh,
#mlab.pipeline.surface(mesh2)
#mlab.view(90, 70, 6.2, (-1.3, -2.9, 0.25))
#mlab.show()
#palette = cm.jet

#fig = plt.figure(figsize=(10,10))
#map = plt.imshow(X, origin='upper',cmap=palette)
#ch=plt.colorbar(map, shrink=0.7)
#plt.show(map)
